# Builds the python wheel package and the NuvlaEdge base image and publishes
# it into nuvladev/ dockerhub registry

name: "NuvlaEdge Dev-Image Build"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !contains(github.ref_name, 'main')}}


# This event should only trigger if the changes affect the source code or this file.
# Also leave the possibility for manual triggers
on:
  push:
    branches:
      - 'main'
  pull_request:
    paths:
      - '**.py'
      - '**.sh'
      # Adding the workflow file as a trigger for the workflow causes the workflow to be trigger on any push on the pull request
      # - '.github/workflows/build-main-devel.yml'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'Dockerfile'

  workflow_dispatch:


jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        shell: bash
        run: echo "BUILD_TIME=$(date --utc +%FT%T.%3NZ)" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build library
        id: build
        run: |
          poetry self add poetry-plugin-export
          poetry build --no-interaction --format=wheel
          poetry export -f requirements.txt --output requirements.txt --without-hashes --without-urls --only main
          poetry export -f requirements.txt --output requirements.agent.txt --without-hashes --without-urls --only agent
          poetry export -f requirements.txt --output requirements.kubernetes.txt --without-hashes --without-urls --only kubernetes
          poetry export -f requirements.txt --output requirements.job-engine.txt --without-hashes --without-urls --only job-engine
          poetry export -f requirements.txt --output requirements.system-manager.txt --without-hashes --without-urls --only system-manager
          poetry export -f requirements.txt --output requirements.network.txt --without-hashes --without-urls --only network
          poetry export -f requirements.txt --output requirements.modbus.txt --without-hashes --without-urls --only modbus
          poetry export -f requirements.txt --output requirements.gpu.txt --without-hashes --without-urls --only gpu
          poetry export -f requirements.txt --output requirements.bluetooth.txt --without-hashes --without-urls --only bluetooth

      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvladev/${{ github.event.repository.name }}:${{ github.head_ref || github.ref_name }},
            nuvladev/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push slim-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.slim-docker
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvladev/${{ github.event.repository.name }}:${{ github.head_ref || github.ref_name }}-slim-docker,
            nuvladev/${{ github.event.repository.name }}:latest-slim-docker
          cache-from: type=gha
          cache-to: type=gha,mode=max


