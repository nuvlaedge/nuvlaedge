# Manually releases a specific version of the NuvlaEdge
# CHANGELOG.md is not generated by this workflow

name: "NuvlaEdge manual release"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (ie 1.2.3)'
        required: true
        type: text
      python_version:
        description: 'Python version'
        required: true
        type: text
        default: '3.11'

jobs:
  set-version:
    name: "Set version"
    runs-on: ubuntu-latest

    outputs:
      old_version: ${{ steps.versioning.outputs.OLD_VERSION }}
      new_version: ${{ steps.versioning.outputs.NEW_VERSION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.COMMIT_KEY }}"

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: "${{ github.event.inputs.python_version }}"
          # cache: 'pip'

      - name: Load cached poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set new version
        id: versioning
        run: |
          echo "TARGET_VERSION=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          echo "OLD_VERSION=$(poetry version -s)" >> "$GITHUB_OUTPUT"
          poetry version --no-interaction ${{ github.event.inputs.version }}
          echo "NEW_VERSION=$(poetry version -s)" >> "$GITHUB_OUTPUT"
          poetry lock --no-interaction --no-update

      - name: version check
        if: ${{ steps.versioning.outputs.NEW_VERSION == steps.versioning.outputs.TARGET_VERSION }}
        run: echo "version is aligned"

      - name: Generate new Tag
        run: |
          git config --global user.email "dev+github-actions[bot]@sixsq.com"
          git config --global user.name "github-actions[bot]" 
          git add poetry.lock pyproject.toml
          git commit -m "chore: release ${{ github.event.inputs.version }}"
          git push origin 
          git tag "${{ github.event.inputs.version }}" -m "NuvlaEdge Version ${{ github.event.inputs.version }}"
          git push --tags origin 

  build-nuvlaedge:
    name: Build NuvlaEdge
    needs: set-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: "${{ github.event.inputs.python_version }}"
          # cache: 'pip'

      - name: Load cached poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build library
        id: build
        run: |
          poetry self add poetry-plugin-export
          poetry build --no-interaction
          mkdir req/
          poetry export -f requirements.txt --output req/requirements.txt --without-hashes --without-urls --only main
          poetry export -f requirements.txt --output req/requirements.agent.txt --without-hashes --without-urls --only agent
          poetry export -f requirements.txt --output req/requirements.kubernetes.txt --without-hashes --without-urls --only kubernetes
          poetry export -f requirements.txt --output req/requirements.job-engine.txt --without-hashes --without-urls --only job-engine
          poetry export -f requirements.txt --output req/requirements.system-manager.txt --without-hashes --without-urls --only system-manager
          poetry export -f requirements.txt --output req/requirements.network.txt --without-hashes --without-urls --only network
          poetry export -f requirements.txt --output req/requirements.modbus.txt --without-hashes --without-urls --only modbus
          poetry export -f requirements.txt --output req/requirements.gpu.txt --without-hashes --without-urls --only gpu
          poetry export -f requirements.txt --output req/requirements.bluetooth.txt --without-hashes --without-urls --only bluetooth

      - name: Build test requirements
        run: ./generate-requirements.sh req

      - name: Save wheels and requirements as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{github.ref_name}}
          path: |
            dist
            req

  release-package:
    name: 'Release NuvlaEdge'
    needs: build-nuvlaedge
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Release package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Releasing NuvlaEdge version ${{ github.event.inputs.version }}"
          gh release create ${{ github.event.inputs.version }} --latest=false --prerelease --generate-notes ./dist/*
        

  release-image:
    name: 'Build and release docker images'
    needs: build-nuvlaedge
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ linux/amd64, linux/arm/v7, linux/arm64/v8 ]

    steps:
      - name: Set env
        shell: bash
        run: echo "BUILD_TIME=$(date --utc +%FT%T.%3NZ)" >> $GITHUB_ENV
      # ------------------------------------------------
      # Checkout and and download package
      # ------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Do not download forked repos atm

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Setup reqs
        run: |
          cp req/* .

      # ------------------------------------------------
      # Setup Docker and Qemu
      # ------------------------------------------------
      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------------------------------
      # Build images for nuvlaedge
      # ------------------------------------------------
      - name: Build and push ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            sixsq/${{ github.event.repository.name }}:${{ github.ref_name }},
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push slim-docker ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.slim-docker
          platforms: ${{ matrix.platform }}
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
            sixsq/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
          cache-from: type=gha
          cache-to: type=gha,mode=max

