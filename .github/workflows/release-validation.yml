name: 'Pre-Release Validation'

on:
  pull_request:
    branches:
      - "release-please--branches--main"
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VALIDATION_IMAGE_NAME: "nuvladev/nuvlaedge-validation:latest"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name || vars.GITHUB_REF_NAME }}

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        shell: bash
        run: echo "BUILD_TIME=$(date --utc +%FT%T.%3NZ)" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build library
        id: build
        run: |
          poetry self add poetry-plugin-export
          poetry build --no-interaction --format=wheel
          poetry export -f requirements.txt --output requirements.txt --without-hashes --without-urls --only main
          poetry export -f requirements.txt --output requirements.agent.txt --without-hashes --without-urls --only agent
          poetry export -f requirements.txt --output requirements.kubernetes.txt --without-hashes --without-urls --only kubernetes
          poetry export -f requirements.txt --output requirements.job-engine.txt --without-hashes --without-urls --only job-engine
          poetry export -f requirements.txt --output requirements.system-manager.txt --without-hashes --without-urls --only system-manager
          poetry export -f requirements.txt --output requirements.network.txt --without-hashes --without-urls --only network
          poetry export -f requirements.txt --output requirements.modbus.txt --without-hashes --without-urls --only modbus
          poetry export -f requirements.txt --output requirements.gpu.txt --without-hashes --without-urls --only gpu
          poetry export -f requirements.txt --output requirements.bluetooth.txt --without-hashes --without-urls --only bluetooth

      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvladev/${{ github.event.repository.name }}:${{ github.head_ref || github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push slim-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.slim-docker
          platforms: linux/amd64,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvladev/${{ github.event.repository.name }}:${{ github.head_ref || github.ref_name }}-slim-docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

  setup-matrix:
    runs-on: ubuntu-latest
    needs: build-dev
    outputs:
      boards: ${{ steps.set-boards.outputs.boards }}
      tests: ${{ steps.set-tests.outputs.tests }}
    steps:
      - id: set-boards
        run: |
          echo "boards=${{ vars.TESTBED_BOARDS }}" >> $GITHUB_OUTPUT

      - id: set-tests
        run: |
          echo "tests=${{ vars.VALIDATION_TESTS }}" >> $GITHUB_OUTPUT

  run-validation:
    needs: setup-matrix
    strategy:
      matrix:
        board-config: ${{ fromJSON(needs.setup-matrix.outputs.boards) }}
        validation-type: ${{ fromJSON(needs.setup-matrix.outputs.tests) }}
      fail-fast: false
    runs-on: ${{ matrix.board-config }}

    steps:
      - name: Pull Validation Image
        run: docker pull $VALIDATION_IMAGE_NAME

      - name: Reset results directory
        run: sudo rm -rf /home/runner/actions-runner/results/temp && sudo mkdir -p /home/runner/actions-runner/results/temp

      - name: Run Validation
        run: >
          docker run 
          --rm 
          -v /home/sixsq/.validation_keys:/root/.ssh
          -v runner_${{ matrix.board-config }}-vol:/results 
          -v ./logs/:/tmp/nuvlaedge_validator/logs
          ${{ env.VALIDATION_IMAGE_NAME }} 
          --target ${{ matrix.board-config }}.toml
          --key ${{ secrets.VALIDATION_NUVLA_API_KEY }}
          --secret ${{ secrets.VALIDATION_NUVLA_API_SECRET }}
          --validator ${{ matrix.validation-type }}
          --retrieve_logs 'true' 
          --nuvlaedge_branch ${{ env.BRANCH_NAME || 'main' }}
          --nuvlaedge_version 'latest' 
          --deployment_branch 'None' 
          --log_level 'INFO' 

      - name: Save logs as artifacts if requested or failed
        if: ${{ steps.validate.outcome }} != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: 'nuvlaedge_logs_${{ matrix.board-config }}-${{ matrix.validation-type }}'
          path: /tmp/nuvlaedge_validator/

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "| ${{ matrix.board-config }} --- ${{ matrix.validation-type }} |"
          junit_files: "/home/runner/actions-runner/results/temp/xml/*.xml"
